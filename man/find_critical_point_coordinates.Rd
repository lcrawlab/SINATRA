% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Reconstruction_Functions.R
\name{find_critical_point_coordinates}
\alias{find_critical_point_coordinates}
\title{Critical Point Finding Algorithm. Returns the coordinates of critical points given a direction and the simplicial complex.}
\usage{
find_critical_point_coordinates(direction, off, steps, phi,
  rejection_sampling = TRUE)
}
\arguments{
\item{direction}{a vector, in matrix type.}

\item{off}{a simplicial complex: a list containing vertices, faces, and edges. Obtained by calling methods from the SECT_Functions file.}

\item{steps}{Integer. Length of the ec curve.}

\item{phi}{Float. Degree of the angle between input direction and the original.}

\item{rejection_sampling(TRUE/FALSE)}{A boolean that determines if the rejection sampling procedure will happen. (Take out the critical points far away from the shape).}
}
\value{
A matrix. The matrix is n x 4 where n is the number of critical points found. The last three columns are the x,y,z coordinates of
the critical points. The first column is the index in the ec curve that corresponds to that critical point.
}
\description{
\code{find_critical_point_coordinates} computes the coordinates of critical points given a direction and the desired simplicial
complex. The number of steps denotes the number of sublevel sets to consider when computing the EC curve, and phi is the initial
choice of angle for the cone of directions around the input.
}
\details{
This function computes the coordinates of critical points of the desired simplicial complex in a specified direction; that is, the
points for which the EC changes in this direction. There is also some further interpretation in Morse Theory to be further explained
in the paper. Given a direction, we generate a cone of 5 directions around and including the input direction. For each of these
directions, we compute the critical point projections and the indices of the ec curves at which they occur. We then shrink phi until
each of these directions outputs the same number of critical points with the assumption that these projections refer to the same points.
Once this happens, we solve the overdetermined putative critical point equation to back out the coordinates of the critical points.
See the paper for a discussion about the assumptions.

KNOWN ISSUES: this function returns critical points that lie on a straight line. We think it may be due to sensitivity to the parameters,
especially the number of sublevel sets taken for the EC curve, or perhaps numerical sensitivity when the value of phi is extremely small,
which occurs when this function is run. The issue could also be with solving the putative critical point equation, which could algebraically
explain why the critical points lie on a subspace. It is currently unclear how the straight line is related to the matrix in the putative
critical point equation. The current fix is to take out the returned critical points that lie too far away from the shape. Another idea for
why this issue occurs is perhaps we are working with the wrong coordinates. In particular the values in each direction at which the EC curve
changes is not in cartesian standard coordinates.
}
