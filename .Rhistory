set.seed(5*i+j)
kernel_function <- function(X) GaussKernel(X, j)
res <- tryCatch( run_simulation_with_kernel(kernel_function, nsim = 10, curve_length = 25, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = 10, shared_points = 10, num_cones = 40, eta = 0.1,
truncated = 500, ball = TRUE, ball_radius = 1.5,
min_points = 3, directions_per_cone = 5, cap_radius = 0.15, radius = 0,ec_type = 'ECT',
subdivision = 3, num_causal_region = 3, num_shared_region = 6),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "kernel_param","X6" = "Trial"))
}
stopCluster(cl)
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Kernel.Param" = simulation_results$kernel_param,
"Index" = simulation_results$Index,
"Class" = simulation_results$Class), mean)
rdfmeans$Kernel.Param <- as.factor(rdfmeans$Kernel.Param)
### Plot results ###
ROC_curve_plt <- ggplot(data <- rdfmeans[rdfmeans$Class == 1,],aes(x = FPR, y = TPR, color = Kernel.Param)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)", color = "Kernel Parameter") +
ggtitle(sprintf("Medium Simulation: SqExpKernel")) +
#geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
ROC_curve_plt <- ggplot(data <- rdfmeans[rdfmeans$Class == 1,],aes(x = FPR, y = TPR, color = Kernel.Param)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)", color = "Kernel Parameter") +
ggtitle(sprintf("Medium Simulation: Gauss Kernel")) +
#geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
n.simulations <- 2
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind') %:%
foreach(j=c(-10,-1,-0.1,0.1,1,10), .combine = 'rbind') %dopar% {
set.seed(5*i+j)
kernel_function <- function(X) polynomial_kernel(X, j, 2)
res <- tryCatch( run_simulation_with_kernel(kernel_function, nsim = 10, curve_length = 25, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = 10, shared_points = 10, num_cones = 40, eta = 0.1,
truncated = 500, ball = TRUE, ball_radius = 1.5,
min_points = 3, directions_per_cone = 5, cap_radius = 0.15, radius = 0,ec_type = 'ECT',
subdivision = 3, num_causal_region = 3, num_shared_region = 6),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "kernel_param","X6" = "Trial"))
}
stopCluster(cl)
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Kernel.Param" = simulation_results$kernel_param,
"Index" = simulation_results$Index,
"Class" = simulation_results$Class), mean)
rdfmeans$Kernel.Param <- as.factor(rdfmeans$Kernel.Param)
### Plot results ###
ROC_curve_plt <- ggplot(data <- rdfmeans[rdfmeans$Class == 1,],aes(x = FPR, y = TPR, color = Kernel.Param)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)", color = "Kernel Parameter") +
ggtitle(sprintf("Medium Simulation: Gauss Kernel")) +
#geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
no_cores <- detectCores() - 10
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
n.simulations <- 2
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind') %:%
foreach(j=c(-10,-1,-0.1,0.1,1,10), .combine = 'rbind') %dopar% {
set.seed(5*i+j)
kernel_function <- function(X) polynomial_kernel(X, j, 2)
res <- tryCatch( run_simulation_with_kernel(kernel_function, nsim = 10, curve_length = 25, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = 10, shared_points = 10, num_cones = 40, eta = 0.1,
truncated = 500, ball = TRUE, ball_radius = 1.5,
min_points = 3, directions_per_cone = 5, cap_radius = 0.15, radius = 0,ec_type = 'ECT',
subdivision = 3, num_causal_region = 3, num_shared_region = 6),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "kernel_param","X6" = "Trial"))
}
stopCluster(cl)
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Kernel.Param" = simulation_results$kernel_param,
"Index" = simulation_results$Index,
"Class" = simulation_results$Class), mean)
rdfmeans$Kernel.Param <- as.factor(rdfmeans$Kernel.Param)
### Plot results ###
ROC_curve_plt <- ggplot(data <- rdfmeans[rdfmeans$Class == 1,],aes(x = FPR, y = TPR, color = Kernel.Param)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)", color = "Kernel Parameter") +
ggtitle(sprintf("Medium Simulation: Gauss Kernel")) +
#geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
run_simulation_with_kernel(kernel_function, nsim = 10, curve_length = 25, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = 10, shared_points = 10, num_cones = 40, eta = 0.1,
truncated = 500, ball = TRUE, ball_radius = 1.5,
min_points = 3, directions_per_cone = 5, cap_radius = 0.15, radius = 0,ec_type = 'ECT',
subdivision = 3, num_causal_region = 3, num_shared_region = 6)
no_cores <- detectCores() - 10
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
n.simulations <- 2
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind') %:%
foreach(j=c(-10,-1,-0.1,0.1,1,10), .combine = 'rbind') %dopar% {
set.seed(5*i+j)
kernel_function <- function(X) polynomial_kernel(X, j, 2)
res <- tryCatch( run_simulation_with_kernel(kernel_function, nsim = 10, curve_length = 25, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = 10, shared_points = 10, num_cones = 40, eta = 0.1,
truncated = 500, ball = TRUE, ball_radius = 1.5,
min_points = 3, directions_per_cone = 5, cap_radius = 0.15, radius = 0,ec_type = 'ECT',
subdivision = 3, num_causal_region = 3, num_shared_region = 6),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "kernel_param","X6" = "Trial"))
}
stopCluster(cl)
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Kernel.Param" = simulation_results$kernel_param,
"Index" = simulation_results$Index,
"Class" = simulation_results$Class), mean)
rdfmeans$Kernel.Param <- as.factor(rdfmeans$Kernel.Param)
### Plot results ###
ROC_curve_plt <- ggplot(data <- rdfmeans[rdfmeans$Class == 1,],aes(x = FPR, y = TPR, color = Kernel.Param)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)", color = "Kernel Parameter") +
ggtitle(sprintf("Medium Simulation: Gauss Kernel")) +
#geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
no_cores <- detectCores() - 10
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
n.simulations <- 2
simulation_results <- foreach(i=1:n.simulations, .combine = 'rbind') %:%
foreach(j=c(0.1,1,10), .combine = 'rbind') %dopar% {
set.seed(5*i+j)
kernel_function <- function(X) polynomial_kernel(X, j, 2)
res <- tryCatch( run_simulation_with_kernel(kernel_function, nsim = 10, curve_length = 25, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = 10, shared_points = 10, num_cones = 40, eta = 0.1,
truncated = 500, ball = TRUE, ball_radius = 1.5,
min_points = 3, directions_per_cone = 5, cap_radius = 0.15, radius = 0,ec_type = 'ECT',
subdivision = 3, num_causal_region = 3, num_shared_region = 6),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
### Label the results for each trial and directions ###
rdf <- cbind(res, rep(j, dim(res)[1]) )
rdf <- data.frame(cbind(rdf,rep(i,dim(rdf)[1])))
rdf <- plyr::rename(rdf,c("X1" = "FPR","X2" = "TPR","X3" = "Class","X4" = "Index","X5" = "kernel_param","X6" = "Trial"))
}
stopCluster(cl)
rdfmeans <- aggregate(simulation_results[c("FPR","TPR")],
by = list("Kernel.Param" = simulation_results$kernel_param,
"Index" = simulation_results$Index,
"Class" = simulation_results$Class), mean)
simulation_results
kernel_function <- function(X) polynomial_kernel(X, j, 2)
run_simulation_with_kernel(kernel_function, nsim = 10, curve_length = 25, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = 10, shared_points = 10, num_cones = 40, eta = 0.1,
truncated = 500, ball = TRUE, ball_radius = 1.5,
min_points = 3, directions_per_cone = 5, cap_radius = 0.15, radius = 0,ec_type = 'ECT',
subdivision = 3, num_causal_region = 3, num_shared_region = 6)
j
j = 10
kernel_function <- function(X) polynomial_kernel(X, j, 2)
res <- tryCatch( run_simulation_with_kernel(kernel_function, nsim = 10, curve_length = 25, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = 10, shared_points = 10, num_cones = 40, eta = 0.1,
truncated = 500, ball = TRUE, ball_radius = 1.5,
min_points = 3, directions_per_cone = 5, cap_radius = 0.15, radius = 0,ec_type = 'ECT',
subdivision = 3, num_causal_region = 3, num_shared_region = 6),
error = function(x) {
return(matrix(nrow = 0,ncol = 3))
}
)
res
run_simulation_with_kernel(kernel_function, nsim = 10, curve_length = 25, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = 10, shared_points = 10, num_cones = 40, eta = 0.1,
truncated = 500, ball = TRUE, ball_radius = 1.5,
min_points = 3, directions_per_cone = 5, cap_radius = 0.15, radius = 0,ec_type = 'ECT',
subdivision = 3, num_causal_region = 3, num_shared_region = 6)
run_simulation_with_kernel(kernel_function, nsim = 10, curve_length = 25, grid_size = 25, distance_to_causal_point = 0.1,
causal_points = 10, shared_points = 10, num_cones = 40, eta = 0.1,
truncated = 500, ball = TRUE, ball_radius = 1.5,
min_points = 3, directions_per_cone = 5, cap_radius = 0.15, radius = 0,ec_type = 'ECT',
subdivision = 3, num_causal_region = 3, num_shared_region = 6)
library(gdata)
d <- read.table("timingresults_sd.txt", sep = ',')
setwd("~/projects/Research/SINATRA/Simulations/timing")
d <- read.table("timingresults_sd.txt", sep = ',')
columns <- c("num.shapes", "num.cones", "dir.per.cone", "ec.curve", "time", "sd")
names(d) <- columns
d
times <- data.frame(matrix(vector(), 0, 5,
dimnames=list(c(), columns)),
stringsAsFactors=F)
times <- data.frame(matrix(vector(), 0, 6,
dimnames=list(c(), columns)),
stringsAsFactors=F)
times
for(i in 1:(dim(d)[1])){
for(j in 1:(dim(d)[2])){
times[i,j] <- as.numeric(strsplit(as.character(d[i,j]), ':')[[1]][2])
}
}
times
write.csv(times, file = "timings_sd.csv")
library(sinatra)
desired_num_cones <- 15
cap_radius <- 0.10
directions_per_cone <- 4
nsim <- 50
curve_length <- 30
ball_radius <- 1.5
subdivision <- 3
ec_type <- 'ECT'
cusps <- 50
dir <- generate_equidistributed_cones(desired_num_cones,cap_radius,directions_per_cone)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(sinatra)
library(rgl)
library(Rvcg)
library(sinatra)
library(rgl)
library(Rvcg)
desired_num_cones <- 15
cap_radius <- 0.10
directions_per_cone <- 4
nsim <- 50
curve_length <- 30
ball_radius <- 1.5
subdivision <- 3
ec_type <- 'ECT'
cusps <- 50
dir <- generate_equidistributed_cones(desired_num_cones,cap_radius,directions_per_cone)
cusps <- 50
### Create the Cusps on the sphere ###
regions =  generate_equidistributed_points(cusps,cusps)
#Initiate the causal points
sphere = vcgSphere(subdivision = subdivision)
region_vertex_dictionary <- vector("list",dim(regions)[1])
sphere_vertices <- asEuclidean(t(sphere$vb))
#get distances between regions and vertices
distances <- as.matrix(pdist::pdist(regions,sphere_vertices))
for (i in 1:(dim(sphere_vertices))[1]){
closest_region <- which.min(distances[,i])
region_vertex_dictionary[[closest_region]] <- c(region_vertex_dictionary[[closest_region]],i)
}
vertex_region_dictionary <- apply(distances,2,FUN = which.min)
causal_regions_1 <- c(1)
causal_regions_2 <- c(50)
shared_regions <- c(25)
causal_points <- 10
noise_points <- 10
### Get the causal and shared regions on the sphere ###
data <- matrix(NA,nrow=0,ncol = 1+curve_length*( dim(dir)[1]))
for (i in 1:nsim){
sphere1 = vcgSphere(subdivision = subdivision)
sphere2 = vcgSphere(subdivision = subdivision)
# Add noise to the sphere
sphere1$vb[1:3,] = sphere1$vb[1:3,]  * rnorm(dim(sphere1$vb)[2], mean = 1, sd = 0.02)
sphere2$vb[1:3,] = sphere2$vb[1:3,]  * rnorm(dim(sphere2$vb)[2], mean = 1, sd = 0.02)
# Elevate the causal regions - Needs to be changed
for (j in 1:length(causal_regions_1)){
causal_dir1 = regions[causal_regions_1[j],]
closest_points_class1 = knnx.index(data = t(sphere$vb[-4,]),query = matrix(causal_dir1,ncol = 3), k = causal_points)
sphere1$vb[1:3,closest_points_class1] = sphere1$vb[1:3,closest_points_class1]  * 1.55 + rnorm(1, mean = 0, sd = 0.1)
}
for (j in 1:length(causal_regions_2)){
causal_dir2 = regions[causal_regions_2[j],]
closest_points_class2 = knnx.index(data = t(sphere$vb[-4,]),query = matrix(causal_dir2,ncol = 3), k = causal_points)
sphere2$vb[1:3,closest_points_class2] = sphere2$vb[1:3,closest_points_class2]  * 1.55 + rnorm(1, mean = 0, sd = 0.1)
}
# Elevate the shared regions - Needs to be changed
for (k in 1:length(shared_regions)){
shared_dir = regions[shared_regions[k],]
closest_points_shared = knnx.index(data = t(sphere$vb[-4,]),query = matrix(shared_dir,ncol = 3), k = noise_points)
shared_points = sphere$vb[1:3,closest_points_shared]  * 0.55 + rnorm(1, mean = 0, sd = 0.1)
sphere1$vb[1:3,closest_points_shared] = shared_points
sphere2$vb[1:3,closest_points_shared] = shared_points
}
sphere_mesh1 = convert_off_file(sphere1)
sphere_mesh2 = convert_off_file(sphere2)
ec_curve_class1 <- matrix(NA,nrow = 1,ncol=0)
ec_curve_class2 <- matrix(NA,nrow = 1,ncol=0)
### compute EC curves for both classes of curves
for (j in 1:dim(dir)[1]){
vertex_function_class_1 <- sphere_mesh1$Vertices%*%c(dir[j,1],dir[j,2],dir[j,3])
vertex_function_class_2 <- sphere_mesh2$Vertices%*%c(dir[j,1],dir[j,2],dir[j,3])
curve1 <- compute_standardized_ec_curve(sphere_mesh1, vertex_function_class_1, curve_length-1, first_column_index = FALSE,ball_radius)
curve2 <- compute_standardized_ec_curve(sphere_mesh2, vertex_function_class_2, curve_length-1, first_column_index = FALSE,ball_radius)
# transform the ECT as desired
curve1 <- update_ec_curve(curve1, ec_type)
curve2 <- update_ec_curve(curve2, ec_type)
# omit the length data, for now
ec_curve_class1 <- c(ec_curve_class1,curve1[,2])
ec_curve_class2 <- c(ec_curve_class2,curve2[,2])
}
data <- rbind(data,c(1,ec_curve_class1))
data <- rbind(data,c(-1,ec_curve_class2))
}
library(sinatra)
library(rgl)
library(Rvcg)
library(FNN)
for (i in 1:nsim){
sphere1 = vcgSphere(subdivision = subdivision)
sphere2 = vcgSphere(subdivision = subdivision)
# Add noise to the sphere
sphere1$vb[1:3,] = sphere1$vb[1:3,]  * rnorm(dim(sphere1$vb)[2], mean = 1, sd = 0.02)
sphere2$vb[1:3,] = sphere2$vb[1:3,]  * rnorm(dim(sphere2$vb)[2], mean = 1, sd = 0.02)
# Elevate the causal regions - Needs to be changed
for (j in 1:length(causal_regions_1)){
causal_dir1 = regions[causal_regions_1[j],]
closest_points_class1 = knnx.index(data = t(sphere$vb[-4,]),query = matrix(causal_dir1,ncol = 3), k = causal_points)
sphere1$vb[1:3,closest_points_class1] = sphere1$vb[1:3,closest_points_class1]  * 1.55 + rnorm(1, mean = 0, sd = 0.1)
}
for (j in 1:length(causal_regions_2)){
causal_dir2 = regions[causal_regions_2[j],]
closest_points_class2 = knnx.index(data = t(sphere$vb[-4,]),query = matrix(causal_dir2,ncol = 3), k = causal_points)
sphere2$vb[1:3,closest_points_class2] = sphere2$vb[1:3,closest_points_class2]  * 1.55 + rnorm(1, mean = 0, sd = 0.1)
}
# Elevate the shared regions - Needs to be changed
for (k in 1:length(shared_regions)){
shared_dir = regions[shared_regions[k],]
closest_points_shared = knnx.index(data = t(sphere$vb[-4,]),query = matrix(shared_dir,ncol = 3), k = noise_points)
shared_points = sphere$vb[1:3,closest_points_shared]  * 0.55 + rnorm(1, mean = 0, sd = 0.1)
sphere1$vb[1:3,closest_points_shared] = shared_points
sphere2$vb[1:3,closest_points_shared] = shared_points
}
sphere_mesh1 = convert_off_file(sphere1)
sphere_mesh2 = convert_off_file(sphere2)
ec_curve_class1 <- matrix(NA,nrow = 1,ncol=0)
ec_curve_class2 <- matrix(NA,nrow = 1,ncol=0)
### compute EC curves for both classes of curves
for (j in 1:dim(dir)[1]){
vertex_function_class_1 <- sphere_mesh1$Vertices%*%c(dir[j,1],dir[j,2],dir[j,3])
vertex_function_class_2 <- sphere_mesh2$Vertices%*%c(dir[j,1],dir[j,2],dir[j,3])
curve1 <- compute_standardized_ec_curve(sphere_mesh1, vertex_function_class_1, curve_length-1, first_column_index = FALSE,ball_radius)
curve2 <- compute_standardized_ec_curve(sphere_mesh2, vertex_function_class_2, curve_length-1, first_column_index = FALSE,ball_radius)
# transform the ECT as desired
curve1 <- update_ec_curve(curve1, ec_type)
curve2 <- update_ec_curve(curve2, ec_type)
# omit the length data, for now
ec_curve_class1 <- c(ec_curve_class1,curve1[,2])
ec_curve_class2 <- c(ec_curve_class2,curve2[,2])
}
data <- rbind(data,c(1,ec_curve_class1))
data <- rbind(data,c(-1,ec_curve_class2))
}
rate_values_sim <- find_rate_variables_with_other_sampling_methods(data,radius = 0, bandwidth = 0.1,
weights = TRUE, type = 'ESS')[,2]
rate_values_sim <- find_rate_variables_with_other_sampling_methods(data, bandwidth = 0.1, type = 'ESS')[,2]
sphere1 <- vcgSphere(subdivision = subdivision)
sphere1$vb[1:3,] <- sphere1$vb[1:3,]  * rnorm(dim(sphere1$vb)[2], mean = 1, sd = 0.02)
### Plot it back onto shape, and make rotating plot
sphere2 <- vcgSphere(subdivision = subdivision)
sphere2$vb[1:3,] <- sphere2$vb[1:3,]  * rnorm(dim(sphere2$vb)[2], mean = 1, sd = 0.02)
for (j in 1:length(causal_regions_1)){
causal_dir1 = regions[causal_regions_1[j],]
closest_points_class1 = knnx.index(data = t(sphere$vb[-4,]),query = matrix(causal_dir1,ncol = 3), k = causal_points)
sphere1$vb[1:3,closest_points_class1] = sphere1$vb[1:3,closest_points_class1]  * 1.55
}
for (j in 1:length(causal_regions_2)){
causal_dir2 = regions[causal_regions_2[j],]
closest_points_class2 = knnx.index(data = t(sphere$vb[-4,]),query = matrix(causal_dir2,ncol = 3), k = causal_points)
sphere2$vb[1:3,closest_points_class2] = sphere2$vb[1:3,closest_points_class2]  * 1.55
}
for (k in 1:length(shared_regions)){
shared_dir = regions[shared_regions[k],]
closest_points_shared = knnx.index(data = t(sphere$vb[-4,]),query = matrix(shared_dir,ncol = 3), k = noise_points)
shared_points = sphere1$vb[1:3,closest_points_shared]  * 0.55
sphere1$vb[1:3,closest_points_shared] = shared_points
shared_points = sphere2$vb[1:3,closest_points_shared]  * 0.55
sphere2$vb[1:3,closest_points_shared] = shared_points
}
complex1<- convert_off_file(sphere1)
complex2 <- convert_off_file(sphere2)
# reconstruct birth times of vertices
vert_matrix1 <- reconstruct_vertices_on_shape(dir, complex1, rate_values_sim, curve_length, cuts = length(rate_values_sim),
directions_per_cone, ball_radius, TRUE)
vert_matrix2 <- reconstruct_vertices_on_shape(dir, complex2, rate_values_sim, curve_length, cuts = length(rate_values_sim),
directions_per_cone, ball_radius, TRUE)
color1='blue'
color2='lightgreen'
color3='orangered'
color3 = 'red'
col_pal=c(color1,color2,color2,color3)
colfunc <- colorRampPalette(col_pal)
# plot, using absolute birth times
rgl.close()
color1='blue'
color2='lightgreen'
color3='orangered'
color3 = 'red'
col_pal=c(color1,color2,color2,color3)
colfunc <- colorRampPalette(col_pal)
# plot, using absolute birth times
mfrow3d(2,1)
# vert_heat1 <- colfunc(cuts)[vert_matrix1[,1]] #absolute
vert_heat1 = colfunc(1 + max(vert_matrix1[,1]) - min(vert_matrix1[,1]))[1 + vert_matrix1[,1] - min(vert_matrix1[,1])] # relative
plot3d(sphere1, col = vert_heat1, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
#vert_heat2 <- colfunc(cuts)[vert_matrix2[,1]]
vert_heat2 = colfunc(1 + max(vert_matrix2[,1]) - min(vert_matrix2[,1]))[1 + vert_matrix2[,1] - min(vert_matrix2[,1])] # relative
plot3d(sphere2, col = vert_heat2, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
rglwidget()
# reconstruct birth times of vertices
vert_matrix1 <- reconstruct_vertices_on_shape(dir, complex1, rate_values_sim, curve_length, cuts = length(rate_values_sim),
directions_per_cone, ball_radius, TRUE)
vert_matrix2 <- reconstruct_vertices_on_shape(dir, complex2, rate_values_sim, curve_length, cuts = length(rate_values_sim),
directions_per_cone, ball_radius, TRUE)
devtools::build()
setwd("~/projects/Research/SINATRA/sinatra")
devtools::build()
devtools::use_vignette("tooth_analysis")
library(sinatra)
library(rgl)
library(Rvcg)
library(FNN)
color1='blue'
color2='lightgreen'
color3='orangered'
color3 = 'red'
col_pal=c(color1,color2,color2,color3)
colfunc <- colorRampPalette(col_pal)
# plot, using absolute birth times
mfrow3d(2,1)
# vert_heat1 <- colfunc(cuts)[vert_matrix1[,1]] #absolute
vert_heat1 = colfunc(1 + max(vert_matrix1[,1]) - min(vert_matrix1[,1]))[1 + vert_matrix1[,1] - min(vert_matrix1[,1])] # relative
plot3d(sphere1, col = vert_heat1, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
#vert_heat2 <- colfunc(cuts)[vert_matrix2[,1]]
vert_heat2 = colfunc(1 + max(vert_matrix2[,1]) - min(vert_matrix2[,1]))[1 + vert_matrix2[,1] - min(vert_matrix2[,1])] # relative
plot3d(sphere2, col = vert_heat2, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
rglwidget()
setwd("~/projects/Research/SINATRA/sinatra")
library(sinatra)
library(sinatra)
library(rgl)
library(Rvcg)
library(FNN)
dragon <- vcgImport("vignettes/dragon.off")
dragon <- vcgImport("vignettes/dragon.off")
setwd("~/projects/Research/SINATRA/sinatra")
dragon <- vcgImport("vignettes/dragon.off")
dragon <- vcgImport("vignettes/dragon.off")
library(knitr
)
knit(null_comparison.Rmd)\
knit(null_comparison.Rmd)
knit(vignettes/null_comparison.Rmd)
setwd("~/projects/Research/SINATRA/sinatra")
knit(vignettes/null_comparison.Rmd)
knit("vignettes/null_comparison.Rmd")
olor1='blue'
color2='lightgreen'
color3='orangered'
color3 = 'red'
col_pal=c(color1,color2,color2,color3)
colfunc <- colorRampPalette(col_pal)
# plot, using absolute birth times
mfrow3d(1,2)
# vert_heat1 <- colfunc(cuts)[vert_matrix1[,1]] #absolute
vert_heat1 = colfunc(1 + max(vert_matrix1[,1]) - min(vert_matrix1[,1]))[1 + vert_matrix1[,1] - min(vert_matrix1[,1])] # relative
plot3d(obj1, col = vert_heat1, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
#vert_heat2 <- colfunc(cuts)[vert_matrix2[,1]]
vert_heat2 = colfunc(1 + max(vert_matrix2[,1]) - min(vert_matrix2[,1]))[1 + vert_matrix2[,1] - min(vert_matrix2[,1])] # relative
plot3d(obj2, col = vert_heat2, back="lines", specular="white", axes = FALSE,xlab = '', ylab = '',zlab='')
obj1 <- dragon
obj2 <- mushroom
dragon <- vcgImport("vignettes/dragon.off")
knit("vignettes/null_comparison.Rmd")
setwd("~/projects/Research/SINATRA/sinatra/vignettes")
save(dragon.off, file="dragon.RData")
save("dragon.off", file="dragon.RData")
getwd()
dragon <- vcgImport("vignettes/dragon.off")
dragon <- vcgImport("dragon.off")
mushroom <- vcgImport("mushroom.off")
# perturb surface with some noise
data <- matrix(NA,nrow=0,ncol = 1+curve_length*( dim(dir)[1]))
library(sinatra)
